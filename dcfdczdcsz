import logging
import pyjokes
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
import asyncio
import random

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Your bot token from BotFather
TOKEN = "7556289662:AAEFufwojiPPRdC_-mXB7kMXBPy8q5DyJ_U"

# Set to store user chat_ids for periodic joke sending
user_chats = set()

# Command to start the bot and send a greeting message
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_chats.add(update.effective_chat.id)  # Add user to the set
    first_name = update.effective_user.first_name
    await update.message.reply_text(f"Hello, {first_name}! ðŸ˜ƒ I'm your joke bot!\nType /joke to get a joke, or /help to see other options!\n\nBot by @f2wnet\nDev - @Xmotic")

# Command to show help menu
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start - Start the bot\n"
        "/joke - Get a random joke\n"
        "/joke_category - Get a joke from a specific category\n"
        "/stop - Stop receiving jokes\n"
        "/help - Show this help menu\n\nBot by @f2wnet\nDev - @Xmotic"
    )

# Command to stop receiving jokes
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_chats.discard(update.effective_chat.id)  # Remove user from the set
    await update.message.reply_text("You've stopped receiving jokes! Type /start to start again.\n\nBot by @f2wnet\nDev - @Xmotic")

# Command to send a random joke
async def send_joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    joke = pyjokes.get_joke()
    await update.message.reply_text(f"Here's a joke for you:\n\n{joke} ðŸ˜„\n\nBot by @f2wnet\nDev - @Xmotic")

# Command to show a joke category selection menu
async def joke_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Neutral", callback_data='neutral')],
        [InlineKeyboardButton("Chuck Norris", callback_data='chuck')],
        [InlineKeyboardButton("All", callback_data='all')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('Please choose a joke category:', reply_markup=reply_markup)

# Callback function for the joke category selection
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    category = query.data

    # Choose joke based on category
    if category == 'neutral':
        joke = pyjokes.get_joke(language='en', category='neutral')
    elif category == 'chuck':
        joke = pyjokes.get_joke(language='en', category='chuck')
    else:
        joke = random.choice([pyjokes.get_joke(category='neutral'), pyjokes.get_joke(category='chuck')])

    await query.edit_message_text(f"Here's a {category} joke:\n\n{joke} ðŸ˜„\n\nBot by @f2wnet\nDev - @Xmotic")

# Function to periodically send jokes to all registered users
async def send_jokes_periodically(context: ContextTypes.DEFAULT_TYPE):
    joke = pyjokes.get_joke()
    for chat_id in user_chats:
        try:
            await context.bot.send_message(chat_id=chat_id, text=f"Here's a joke for you:\n\n{joke} ðŸ˜„\n\nBot by @f2wnet\nDev - @Xmotic")
        except Exception as e:
            logger.error(f"Error sending message to {chat_id}: {e}")

async def main():
    application = ApplicationBuilder().token(TOKEN).build()

    # Register command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("joke", send_joke))
    application.add_handler(CommandHandler("joke_category", joke_category))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stop", stop))

    # Register the callback for joke categories
    application.add_handler(CallbackQueryHandler(button_callback))

    # Start the scheduled jokes function in the background (send joke every 300 seconds)
    application.job_queue.run_repeating(send_jokes_periodically, interval=300, first=0)

    # Start the bot
    await application.run_polling()

if __name__ == '__main__':
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            asyncio.ensure_future(main())  # If event loop is already running, schedule the main function
        else:
            loop.run_until_complete(main())
    except RuntimeError as e:
        if 'already running' in str(e):
            asyncio.ensure_future(main())
        else:
            raise
